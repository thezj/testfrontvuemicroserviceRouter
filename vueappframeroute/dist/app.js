!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";function n(e,t){for(var r=[],n={},o=0;o<t.length;o++){var a=t[o],i=a[0],p={id:e+":"+o,css:a[1],media:a[2],sourceMap:a[3]};n[i]?n[i].parts.push(p):r.push(n[i]={id:i,parts:[p]})}return r}r.r(t),r.d(t,"default",function(){return m});var o="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!o)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var a={},i=o&&(document.head||document.getElementsByTagName("head")[0]),p=null,s=0,u=!1,c=function(){},l=null,d="data-vue-ssr-id",f="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function m(e,t,r,o){u=r,l=o||{};var i=n(e,t);return h(i),function(t){for(var r=[],o=0;o<i.length;o++){var p=i[o];(s=a[p.id]).refs--,r.push(s)}t?h(i=n(e,t)):i=[];for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var u=0;u<s.parts.length;u++)s.parts[u]();delete a[s.id]}}}}function h(e){for(var t=0;t<e.length;t++){var r=e[t],n=a[r.id];if(n){n.refs++;for(var o=0;o<n.parts.length;o++)n.parts[o](r.parts[o]);for(;o<r.parts.length;o++)n.parts.push(g(r.parts[o]));n.parts.length>r.parts.length&&(n.parts.length=r.parts.length)}else{var i=[];for(o=0;o<r.parts.length;o++)i.push(g(r.parts[o]));a[r.id]={id:r.id,refs:1,parts:i}}}}function v(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function g(e){var t,r,n=document.querySelector("style["+d+'~="'+e.id+'"]');if(n){if(u)return c;n.parentNode.removeChild(n)}if(f){var o=s++;n=p||(p=v()),t=b.bind(null,n,o,!1),r=b.bind(null,n,o,!0)}else n=v(),t=function(e,t){var r=t.css,n=t.media,o=t.sourceMap;n&&e.setAttribute("media",n);l.ssrId&&e.setAttribute(d,t.id);o&&(r+="\n/*# sourceURL="+o.sources[0]+" */",r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");if(e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}.bind(null,n),r=function(){n.parentNode.removeChild(n)};return t(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;t(e=n)}else r()}}var y,_=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function b(e,t,r,n){var o=r?"":n.css;if(e.styleSheet)e.styleSheet.cssText=_(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}},function(e,t,r){"use strict";r.r(t);var n={data:()=>({})},o=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticStyle:{border:"1px solid gray",height:"800px"}},[r("div",[e._v("---appframe---")]),e._v(" "),r("div",{staticStyle:{border:"1px solid gray",margin:"10px",padding:"10px"}},[r("el-button",{on:{click:function(t){e.$irouter("/")}}},[e._v("Home")]),e._v(" "),e._l(e.$allcomponent,function(t){return r("el-button",{key:t.name,on:{click:function(r){e.$irouter(t.path)}}},[e._v(e._s(t.name))])}),e._v(" "),r("el-button",{on:{click:function(t){e.$irouter("/errorpath")}}},[e._v("errorpath")])],2),e._v(" "),r("div",{staticStyle:{border:"1px solid gray",margin:"10px",padding:"10px",height:"500px"}},[r("div",[e._v("---router-view---")]),e._v(" "),r("keep-alive",[r("router-view")],1)],1)])};function a(e,t,r,n,o,a,i,p){var s=typeof(e=e||{}).default;"object"!==s&&"function"!==s||(e=e.default);var u,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=r,c._compiled=!0),n&&(c.functional=!0),a&&(c._scopeId=a),i?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(i)},c._ssrRegister=u):o&&(u=p?function(){o.call(this,this.$root.$options.shadowRoot)}:o),u)if(c.functional){c._injectStyles=u;var l=c.render;c.render=function(e,t){return u.call(t),l(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,u):[u]}return{exports:e,options:c}}o._withStripped=!0;var i=!1;var p=a(n,o,[],!1,function(e){i||r(4)},"data-v-3521391c",null);p.options.__file="src\\appframe.vue";var s=p.exports,u=function(){var e=this.$createElement;return(this._self._c||e)("div",[this._v("404")])};u._withStripped=!0;var c=a({},u,[],!1,null,null,null);c.options.__file="src\\404.vue";var l=c.exports,d=function(){var e=this.$createElement;return(this._self._c||e)("div",[this._v("welcome")])};d._withStripped=!0;var f=a({},d,[],!1,null,null,null);f.options.__file="src\\home.vue";var m=f.exports;Vue.use(VueRouter);let h=new Set;Vue.prototype.$allcomponent=[{name:"comp1",path:"/comp1/home",url:"http://localhost:8001/comp1.js"},{name:"comp3",path:"/comp3/home",url:"http://localhost:8001/comp3.js"},{name:"comp2",path:"/comp2/home",url:"http://localhost:8002/comp2.js"}],Vue.prototype.$irouter=(e=>{let t=Vue.prototype.$allcomponent.find(t=>t.path==e);if(t){let e=Math.random();return window.newRouteKey=e,new Promise((r,n)=>{if(h.has(t.name))frameapp.$router.push(t.path),r();else{document.querySelectorAll("script").forEach(e=>{e.src==t.url&&e.parentNode.removeChild(e)});let n=document.createElement("script");n.src=t.url,document.querySelector("head").appendChild(n);let o=(new Date).getTime(),a=()=>{window[t.name]?(h.add(t.name),console.log(`${t.name}加载完成`),frameapp.$router.addRoutes([{path:t.path,component:window[t.name]}]),frameapp.$router.push(t.path),r()):e==window.newRouteKey?((new Date).getTime()-o)/1e3<5?setTimeout(a,1):(console.error(`组件${t.name}加载超时`),frameapp.$router.push("/404")):console.log(`取消导航到${t.name}`)};a()}})}"/"==e?frameapp.$router.push("/"):frameapp.$router.push("/404")});const v=new VueRouter({routes:[{path:"/",component:m},{path:"/404",component:l}]});v.beforeEach((e,t,r)=>{let n=Vue.prototype.$allcomponent.find(t=>t.path==e.path);n?setTimeout(t=>{h.has(n.name)?r():frameapp.$irouter(e.path)},0):"/"==e.path||"/404"==e.path?r():r("/404")});let g=new Vue({el:"#app",router:v,template:"<appframe />",components:{appframe:s}});window.frameapp=g},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(i=n,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),a=n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"});return[r].concat(a).concat([o]).join("\n")}var i;return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+r+"}":r}).join("")},t.i=function(e,r){"string"==typeof e&&(e=[[null,e,""]]);for(var n={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(n[a]=!0)}for(o=0;o<e.length;o++){var i=e[o];"number"==typeof i[0]&&n[i[0]]||(r&&!i[2]?i[2]=r:r&&(i[2]="("+i[2]+") and ("+r+")"),t.push(i))}},t}},function(e,t,r){(e.exports=r(2)(!0)).push([e.i,"\ndiv[data-v-3521391c] {\r\n  padding: 10px;\n}\r\n","",{version:3,sources:["C:/Users/wksc/Desktop/vueappframeroute/src/src/appframe.vue"],names:[],mappings:";AAwBA;EACA,cAAA;CACA",file:"appframe.vue",sourcesContent:["<template>\r\n  <div style=\"border:1px solid gray;height:800px;\">\r\n    <div>---appframe---</div>\r\n    <div style=\"border:1px solid gray;margin:10px; padding:10px;\">\r\n    <el-button  @click='$irouter(\"/\")'>Home</el-button> \r\n    <el-button v-for='comp in $allcomponent' :key='comp.name' @click='$irouter(comp.path)'>{{comp.name}}</el-button> \r\n    <el-button  @click='$irouter(\"/errorpath\")'>errorpath</el-button> \r\n    </div>\r\n    <div style=\"border:1px solid gray;margin:10px; padding:10px; height:500px; \">\r\n      <div>---router-view---</div>\r\n      <keep-alive>\r\n        <router-view></router-view>\r\n      </keep-alive>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {};\r\n  }\r\n};\r\n<\/script>\r\n<style scoped>\r\ndiv {\r\n  padding: 10px;\r\n}\r\n</style>"],sourceRoot:""}])},function(e,t,r){var n=r(3);"string"==typeof n&&(n=[[e.i,n,""]]),n.locals&&(e.exports=n.locals);(0,r(0).default)("56bf524f",n,!1,{})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2xpc3RUb1N0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzIiwid2VicGFjazovLy9zcmMvYXBwZnJhbWUudnVlIiwid2VicGFjazovLy8uL3NyYy9hcHBmcmFtZS52dWU/MWNjZiIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnQtbm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwZnJhbWUudnVlIiwid2VicGFjazovLy8uL3NyYy80MDQudnVlPzQ3NWQiLCJ3ZWJwYWNrOi8vLy4vc3JjLzQwNC52dWUiLCJ3ZWJwYWNrOi8vLy4vc3JjL2hvbWUudnVlPzhmMzciLCJ3ZWJwYWNrOi8vLy4vc3JjL2hvbWUudnVlIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcGZyYW1lLnZ1ZT9lMzQxIiwid2VicGFjazovLy8uL3NyYy9hcHBmcmFtZS52dWU/ZWYzYSJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJ2YWx1ZSIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibGlzdFRvU3R5bGVzIiwicGFyZW50SWQiLCJsaXN0Iiwic3R5bGVzIiwibmV3U3R5bGVzIiwibGVuZ3RoIiwiaXRlbSIsImlkIiwicGFydCIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicGFydHMiLCJwdXNoIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImFkZFN0eWxlc0NsaWVudCIsImhhc0RvY3VtZW50IiwiZG9jdW1lbnQiLCJERUJVRyIsIkVycm9yIiwic3R5bGVzSW5Eb20iLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzaW5nbGV0b25FbGVtZW50Iiwic2luZ2xldG9uQ291bnRlciIsImlzUHJvZHVjdGlvbiIsIm5vb3AiLCJvcHRpb25zIiwic3NySWRLZXkiLCJpc09sZElFIiwibmF2aWdhdG9yIiwidGVzdCIsInVzZXJBZ2VudCIsInRvTG93ZXJDYXNlIiwiX2lzUHJvZHVjdGlvbiIsIl9vcHRpb25zIiwiYWRkU3R5bGVzVG9Eb20iLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsImFkZFN0eWxlIiwiY3JlYXRlU3R5bGVFbGVtZW50Iiwic3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJhcHBlbmRDaGlsZCIsIm9iaiIsInVwZGF0ZSIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsImJpbmQiLCJzZXRBdHRyaWJ1dGUiLCJzc3JJZCIsInNvdXJjZXMiLCJidG9hIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwicmVwbGFjZW1lbnQiLCJmaWx0ZXIiLCJCb29sZWFuIiwiam9pbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiaW5zZXJ0QmVmb3JlIiwiYXBwZnJhbWUiLCJkYXRhIiwicmVuZGVyIiwiX3ZtIiwidGhpcyIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwic3RhdGljU3R5bGUiLCJib3JkZXIiLCJoZWlnaHQiLCJfdiIsIm1hcmdpbiIsInBhZGRpbmciLCJvbiIsImNsaWNrIiwiJGV2ZW50IiwiJGlyb3V0ZXIiLCJfbCIsIiRhbGxjb21wb25lbnQiLCJjb21wIiwia2V5IiwicGF0aCIsIl9zIiwibm9ybWFsaXplQ29tcG9uZW50Iiwic2NyaXB0RXhwb3J0cyIsInN0YXRpY1JlbmRlckZucyIsImZ1bmN0aW9uYWxUZW1wbGF0ZSIsImluamVjdFN0eWxlcyIsInNjb3BlSWQiLCJtb2R1bGVJZGVudGlmaWVyIiwic2hhZG93TW9kZSIsImRlZmF1bHQiLCJob29rIiwiX2NvbXBpbGVkIiwiZnVuY3Rpb25hbCIsIl9zY29wZUlkIiwiY29udGV4dCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJwYXJlbnQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiYWRkIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJoIiwiZXhpc3RpbmciLCJiZWZvcmVDcmVhdGUiLCJjb25jYXQiLCJfd2l0aFN0cmlwcGVkIiwiZGlzcG9zZWQiLCJDb21wb25lbnQiLCJfX2ZpbGUiLCJzcmNfYXBwZnJhbWUiLCJfNDA0X3JlbmRlciIsIl80MDRfQ29tcG9uZW50Iiwic3JjXzQwNCIsImhvbWVfcmVuZGVyIiwiaG9tZV9Db21wb25lbnQiLCJzcmNfaG9tZSIsIlZ1ZSIsInVzZSIsIlZ1ZVJvdXRlciIsImFsbGNvbXBzIiwiU2V0IiwidXJsIiwicm91dGUiLCJmaW5kIiwiY3VycmVudFJvdXRlS2V5IiwiTWF0aCIsInJhbmRvbSIsIndpbmRvdyIsIm5ld1JvdXRlS2V5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJoYXMiLCJmcmFtZWFwcCIsIiRyb3V0ZXIiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsInNyYyIsInNjcmlwdGNvbSIsIm5vdyIsIkRhdGUiLCJnZXRUaW1lIiwidGltZXIiLCJjb25zb2xlIiwibG9nIiwiYWRkUm91dGVzIiwiY29tcG9uZW50Iiwic2V0VGltZW91dCIsImVycm9yIiwicm91dGVyIiwicm91dGVzIiwiYmVmb3JlRWFjaCIsInRvIiwiZnJvbSIsIm5leHQiLCJfIiwiYXBwIiwiZWwiLCJ0ZW1wbGF0ZSIsImNvbXBvbmVudHMiLCJ1c2VTb3VyY2VNYXAiLCJ0b1N0cmluZyIsIm1hcCIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwidmVyc2lvbiIsIm5hbWVzIiwibWFwcGluZ3MiLCJmaWxlIiwic291cmNlc0NvbnRlbnQiLCJsb2NhbHMiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsSUFDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxZQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxFQUFBQyxHQUNBWixFQUFBYSxFQUFBWCxFQUFBUyxJQUNBRyxPQUFBQyxlQUFBYixFQUFBUyxHQUNBSyxjQUFBLEVBQ0FDLFlBQUEsRUFD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QSxpQkFBQThOLFFBQUEzTixFQUFBQyxFQUFBME4sRUFBQSxNQUNBQSxFQUFBYyxTQUFBek8sRUFBQUQsUUFBQTROLEVBQUFjLFNBR0FuRixFQURBekosRUFBQSxHQUFBOEksU0FDQSxXQUFBZ0YsR0FBQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiLyoqXG4gKiBUcmFuc2xhdGVzIHRoZSBsaXN0IGZvcm1hdCBwcm9kdWNlZCBieSBjc3MtbG9hZGVyIGludG8gc29tZXRoaW5nXG4gKiBlYXNpZXIgdG8gbWFuaXB1bGF0ZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChwYXJlbnRJZCwgbGlzdCkge1xuICB2YXIgc3R5bGVzID0gW11cbiAgdmFyIG5ld1N0eWxlcyA9IHt9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXVxuICAgIHZhciBpZCA9IGl0ZW1bMF1cbiAgICB2YXIgY3NzID0gaXRlbVsxXVxuICAgIHZhciBtZWRpYSA9IGl0ZW1bMl1cbiAgICB2YXIgc291cmNlTWFwID0gaXRlbVszXVxuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgaWQ6IHBhcmVudElkICsgJzonICsgaSxcbiAgICAgIGNzczogY3NzLFxuICAgICAgbWVkaWE6IG1lZGlhLFxuICAgICAgc291cmNlTWFwOiBzb3VyY2VNYXBcbiAgICB9XG4gICAgaWYgKCFuZXdTdHlsZXNbaWRdKSB7XG4gICAgICBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0geyBpZDogaWQsIHBhcnRzOiBbcGFydF0gfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpXG4gICAgfVxuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cbiIsIi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiAgTW9kaWZpZWQgYnkgRXZhbiBZb3UgQHl5eDk5MDgwM1xuKi9cblxuaW1wb3J0IGxpc3RUb1N0eWxlcyBmcm9tICcuL2xpc3RUb1N0eWxlcydcblxudmFyIGhhc0RvY3VtZW50ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuXG5pZiAodHlwZW9mIERFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBERUJVRykge1xuICBpZiAoIWhhc0RvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2dWUtc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQuICcgK1xuICAgIFwiVXNlIHsgdGFyZ2V0OiAnbm9kZScgfSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnIHRvIGluZGljYXRlIGEgc2VydmVyLXJlbmRlcmluZyBlbnZpcm9ubWVudC5cIlxuICApIH1cbn1cblxuLypcbnR5cGUgU3R5bGVPYmplY3QgPSB7XG4gIGlkOiBudW1iZXI7XG4gIHBhcnRzOiBBcnJheTxTdHlsZU9iamVjdFBhcnQ+XG59XG5cbnR5cGUgU3R5bGVPYmplY3RQYXJ0ID0ge1xuICBjc3M6IHN0cmluZztcbiAgbWVkaWE6IHN0cmluZztcbiAgc291cmNlTWFwOiA/c3RyaW5nXG59XG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7LypcbiAgW2lkOiBudW1iZXJdOiB7XG4gICAgaWQ6IG51bWJlcixcbiAgICByZWZzOiBudW1iZXIsXG4gICAgcGFydHM6IEFycmF5PChvYmo/OiBTdHlsZU9iamVjdFBhcnQpID0+IHZvaWQ+XG4gIH1cbiovfVxuXG52YXIgaGVhZCA9IGhhc0RvY3VtZW50ICYmIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0pXG52YXIgc2luZ2xldG9uRWxlbWVudCA9IG51bGxcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMFxudmFyIGlzUHJvZHVjdGlvbiA9IGZhbHNlXG52YXIgbm9vcCA9IGZ1bmN0aW9uICgpIHt9XG52YXIgb3B0aW9ucyA9IG51bGxcbnZhciBzc3JJZEtleSA9ICdkYXRhLXZ1ZS1zc3ItaWQnXG5cbi8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcYi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZFN0eWxlc0NsaWVudCAocGFyZW50SWQsIGxpc3QsIF9pc1Byb2R1Y3Rpb24sIF9vcHRpb25zKSB7XG4gIGlzUHJvZHVjdGlvbiA9IF9pc1Byb2R1Y3Rpb25cblxuICBvcHRpb25zID0gX29wdGlvbnMgfHwge31cblxuICB2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKHBhcmVudElkLCBsaXN0KVxuICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXVxuICAgICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICAgIGRvbVN0eWxlLnJlZnMtLVxuICAgICAgbWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpXG4gICAgfVxuICAgIGlmIChuZXdMaXN0KSB7XG4gICAgICBzdHlsZXMgPSBsaXN0VG9TdHlsZXMocGFyZW50SWQsIG5ld0xpc3QpXG4gICAgICBhZGRTdHlsZXNUb0RvbShzdHlsZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcyA9IFtdXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV1cbiAgICAgIGlmIChkb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXSgpXG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzIC8qIEFycmF5PFN0eWxlT2JqZWN0PiAqLykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gc3R5bGVzW2ldXG4gICAgdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF1cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrK1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKVxuICAgICAgfVxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSkpXG4gICAgICB9XG4gICAgICBpZiAoZG9tU3R5bGUucGFydHMubGVuZ3RoID4gaXRlbS5wYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgZG9tU3R5bGUucGFydHMubGVuZ3RoID0gaXRlbS5wYXJ0cy5sZW5ndGhcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhcnRzID0gW11cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0pKVxuICAgICAgfVxuICAgICAgc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7IGlkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHMgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKCkge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKVxuICBzdHlsZUVsZW1lbnQudHlwZSA9ICd0ZXh0L2NzcydcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsZW1lbnQpXG4gIHJldHVybiBzdHlsZUVsZW1lbnRcbn1cblxuZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgdmFyIHVwZGF0ZSwgcmVtb3ZlXG4gIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZVsnICsgc3NySWRLZXkgKyAnfj1cIicgKyBvYmouaWQgKyAnXCJdJylcblxuICBpZiAoc3R5bGVFbGVtZW50KSB7XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYW5kIGluIHByb2R1Y3Rpb24gbW9kZS5cbiAgICAgIC8vIHNpbXBseSBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG5vb3BcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaGFzIFNTUiBzdHlsZXMgYnV0IGluIGRldiBtb2RlLlxuICAgICAgLy8gZm9yIHNvbWUgcmVhc29uIENocm9tZSBjYW4ndCBoYW5kbGUgc291cmNlIG1hcCBpbiBzZXJ2ZXItcmVuZGVyZWRcbiAgICAgIC8vIHN0eWxlIHRhZ3MgLSBzb3VyY2UgbWFwcyBpbiA8c3R5bGU+IG9ubHkgd29ya3MgaWYgdGhlIHN0eWxlIHRhZyBpc1xuICAgICAgLy8gY3JlYXRlZCBhbmQgaW5zZXJ0ZWQgZHluYW1pY2FsbHkuIFNvIHdlIHJlbW92ZSB0aGUgc2VydmVyIHJlbmRlcmVkXG4gICAgICAvLyBzdHlsZXMgYW5kIGluamVjdCBuZXcgb25lcy5cbiAgICAgIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudClcbiAgICB9XG4gIH1cblxuICBpZiAoaXNPbGRJRSkge1xuICAgIC8vIHVzZSBzaW5nbGV0b24gbW9kZSBmb3IgSUU5LlxuICAgIHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrXG4gICAgc3R5bGVFbGVtZW50ID0gc2luZ2xldG9uRWxlbWVudCB8fCAoc2luZ2xldG9uRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpKVxuICAgIHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIGZhbHNlKVxuICAgIHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZUVsZW1lbnQsIHN0eWxlSW5kZXgsIHRydWUpXG4gIH0gZWxzZSB7XG4gICAgLy8gdXNlIG11bHRpLXN0eWxlLXRhZyBtb2RlIGluIGFsbCBvdGhlciBjYXNlc1xuICAgIHN0eWxlRWxlbWVudCA9IGNyZWF0ZVN0eWxlRWxlbWVudCgpXG4gICAgdXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlRWxlbWVudClcbiAgICByZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpXG4gICAgfVxuICB9XG5cbiAgdXBkYXRlKG9iailcblxuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaiAvKiBTdHlsZU9iamVjdFBhcnQgKi8pIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuICAgICAgICAgIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG4gICAgICAgICAgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHVwZGF0ZShvYmogPSBuZXdPYmopXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpXG4gICAgfVxuICB9XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXh0U3RvcmUgPSBbXVxuXG4gIHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG4gICAgdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJylcbiAgfVxufSkoKVxuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZUVsZW1lbnQsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzXG5cbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpXG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpXG4gICAgdmFyIGNoaWxkTm9kZXMgPSBzdHlsZUVsZW1lbnQuY2hpbGROb2Rlc1xuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKVxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGVFbGVtZW50Lmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSlcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGNzc05vZGUpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlRWxlbWVudCwgb2JqKSB7XG4gIHZhciBjc3MgPSBvYmouY3NzXG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcFxuXG4gIGlmIChtZWRpYSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpXG4gIH1cbiAgaWYgKG9wdGlvbnMuc3NySWQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKHNzcklkS2V5LCBvYmouaWQpXG4gIH1cblxuICBpZiAoc291cmNlTWFwKSB7XG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9kZXZ0b29scy9kb2NzL2phdmFzY3JpcHQtZGVidWdnaW5nXG4gICAgLy8gdGhpcyBtYWtlcyBzb3VyY2UgbWFwcyBpbnNpZGUgc3R5bGUgdGFncyB3b3JrIHByb3Blcmx5IGluIENocm9tZVxuICAgIGNzcyArPSAnXFxuLyojIHNvdXJjZVVSTD0nICsgc291cmNlTWFwLnNvdXJjZXNbMF0gKyAnICovJ1xuICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG4gICAgY3NzICs9ICdcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCcgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgJyAqLydcbiAgfVxuXG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZClcbiAgICB9XG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpXG4gIH1cbn1cbiIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IHN0eWxlPVwiYm9yZGVyOjFweCBzb2xpZCBncmF5O2hlaWdodDo4MDBweDtcIj5cclxuICAgIDxkaXY+LS0tYXBwZnJhbWUtLS08L2Rpdj5cclxuICAgIDxkaXYgc3R5bGU9XCJib3JkZXI6MXB4IHNvbGlkIGdyYXk7bWFyZ2luOjEwcHg7IHBhZGRpbmc6MTBweDtcIj5cclxuICAgIDxlbC1idXR0b24gIEBjbGljaz0nJGlyb3V0ZXIoXCIvXCIpJz5Ib21lPC9lbC1idXR0b24+IFxyXG4gICAgPGVsLWJ1dHRvbiB2LWZvcj0nY29tcCBpbiAkYWxsY29tcG9uZW50JyA6a2V5PSdjb21wLm5hbWUnIEBjbGljaz0nJGlyb3V0ZXIoY29tcC5wYXRoKSc+e3tjb21wLm5hbWV9fTwvZWwtYnV0dG9uPiBcclxuICAgIDxlbC1idXR0b24gIEBjbGljaz0nJGlyb3V0ZXIoXCIvZXJyb3JwYXRoXCIpJz5lcnJvcnBhdGg8L2VsLWJ1dHRvbj4gXHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgc3R5bGU9XCJib3JkZXI6MXB4IHNvbGlkIGdyYXk7bWFyZ2luOjEwcHg7IHBhZGRpbmc6MTBweDsgaGVpZ2h0OjUwMHB4OyBcIj5cclxuICAgICAgPGRpdj4tLS1yb3V0ZXItdmlldy0tLTwvZGl2PlxyXG4gICAgICA8a2VlcC1hbGl2ZT5cclxuICAgICAgICA8cm91dGVyLXZpZXc+PC9yb3V0ZXItdmlldz5cclxuICAgICAgPC9rZWVwLWFsaXZlPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBkYXRhKCkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxufTtcclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZWQ+XHJcbmRpdiB7XHJcbiAgcGFkZGluZzogMTBweDtcclxufVxyXG48L3N0eWxlPiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY1N0eWxlOiB7IGJvcmRlcjogXCIxcHggc29saWQgZ3JheVwiLCBoZWlnaHQ6IFwiODAwcHhcIiB9IH0sXG4gICAgW1xuICAgICAgX2MoXCJkaXZcIiwgW192bS5fdihcIi0tLWFwcGZyYW1lLS0tXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNTdHlsZToge1xuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBncmF5XCIsXG4gICAgICAgICAgICBtYXJnaW46IFwiMTBweFwiLFxuICAgICAgICAgICAgcGFkZGluZzogXCIxMHB4XCJcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcbiAgICAgICAgICAgIFwiZWwtYnV0dG9uXCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgX3ZtLiRpcm91dGVyKFwiL1wiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtfdm0uX3YoXCJIb21lXCIpXVxuICAgICAgICAgICksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uX2woX3ZtLiRhbGxjb21wb25lbnQsIGZ1bmN0aW9uKGNvbXApIHtcbiAgICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICAgXCJlbC1idXR0b25cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogY29tcC5uYW1lLFxuICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIF92bS4kaXJvdXRlcihjb21wLnBhdGgpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhjb21wLm5hbWUpKV1cbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJlbC1idXR0b25cIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdm0uJGlyb3V0ZXIoXCIvZXJyb3JwYXRoXCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgW192bS5fdihcImVycm9ycGF0aFwiKV1cbiAgICAgICAgICApXG4gICAgICAgIF0sXG4gICAgICAgIDJcbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNTdHlsZToge1xuICAgICAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBncmF5XCIsXG4gICAgICAgICAgICBtYXJnaW46IFwiMTBweFwiLFxuICAgICAgICAgICAgcGFkZGluZzogXCIxMHB4XCIsXG4gICAgICAgICAgICBoZWlnaHQ6IFwiNTAwcHhcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIFtfdm0uX3YoXCItLS1yb3V0ZXItdmlldy0tLVwiKV0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJrZWVwLWFsaXZlXCIsIFtfYyhcInJvdXRlci12aWV3XCIpXSwgMSlcbiAgICAgICAgXSxcbiAgICAgICAgMVxuICAgICAgKVxuICAgIF1cbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH1cbmlmIChtb2R1bGUuaG90KSB7XG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKG1vZHVsZS5ob3QuZGF0YSkge1xuICAgIHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIikgICAgICAucmVyZW5kZXIoXCJkYXRhLXYtMzUyMTM5MWNcIiwgeyByZW5kZXI6IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnMgfSlcbiAgfVxufSIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIHNjcmlwdEV4cG9ydHMgPSBzY3JpcHRFeHBvcnRzIHx8IHt9XG5cbiAgLy8gRVM2IG1vZHVsZXMgaW50ZXJvcFxuICB2YXIgdHlwZSA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzLmRlZmF1bHRcbiAgaWYgKHR5cGUgPT09ICdvYmplY3QnIHx8IHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzY3JpcHRFeHBvcnRzID0gc2NyaXB0RXhwb3J0cy5kZWZhdWx0XG4gIH1cblxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9IHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwidmFyIGRpc3Bvc2VkID0gZmFsc2VcbmZ1bmN0aW9uIGluamVjdFN0eWxlIChjb250ZXh0KSB7XG4gIGlmIChkaXNwb3NlZCkgcmV0dXJuXG4gIHJlcXVpcmUoXCIhIXZ1ZS1zdHlsZS1sb2FkZXIhY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4P3tcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0zNTIxMzkxY1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL2FwcGZyYW1lLnZ1ZVwiKVxufVxuLyogc2NyaXB0ICovXG5leHBvcnQgKiBmcm9tIFwiISEhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9hcHBmcmFtZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2FwcGZyYW1lLnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zNTIxMzkxY1xcXCIsXFxcImhhc1Njb3BlZFxcXCI6dHJ1ZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vYXBwZnJhbWUudnVlXCJcbi8qIHRlbXBsYXRlIGZ1bmN0aW9uYWwgKi9cbnZhciBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18gPSBmYWxzZVxuLyogc3R5bGVzICovXG52YXIgX192dWVfc3R5bGVzX18gPSBpbmplY3RTdHlsZVxuLyogc2NvcGVJZCAqL1xudmFyIF9fdnVlX3Njb3BlSWRfXyA9IFwiZGF0YS12LTM1MjEzOTFjXCJcbi8qIG1vZHVsZUlkZW50aWZpZXIgKHNlcnZlciBvbmx5KSAqL1xudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSBudWxsXG5pbXBvcnQgbm9ybWFsaXplQ29tcG9uZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50LW5vcm1hbGl6ZXJcIlxudmFyIENvbXBvbmVudCA9IG5vcm1hbGl6ZUNvbXBvbmVudChcbiAgX192dWVfc2NyaXB0X18sXG4gIF9fdnVlX3JlbmRlcl9fLFxuICBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19fLFxuICBfX3Z1ZV90ZW1wbGF0ZV9mdW5jdGlvbmFsX18sXG4gIF9fdnVlX3N0eWxlc19fLFxuICBfX3Z1ZV9zY29wZUlkX18sXG4gIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX19cbilcbkNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjXFxcXGFwcGZyYW1lLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0zNTIxMzkxY1wiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTM1MjEzOTFjXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW192bS5fdihcIjQwNFwiKV0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi0zNmU1NGZiY1wiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2Vcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vNDA0LnZ1ZVwiXG5pbXBvcnQgX192dWVfc2NyaXB0X18gZnJvbSBcIiEhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vNDA0LnZ1ZVwiXG4vKiB0ZW1wbGF0ZSAqL1xuaW1wb3J0IHtyZW5kZXIgYXMgX192dWVfcmVuZGVyX18sIHN0YXRpY1JlbmRlckZucyBhcyBfX3Z1ZV9zdGF0aWNfcmVuZGVyX2Zuc19ffSBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvdGVtcGxhdGUtY29tcGlsZXIvaW5kZXg/e1xcXCJpZFxcXCI6XFxcImRhdGEtdi0zNmU1NGZiY1xcXCIsXFxcImhhc1Njb3BlZFxcXCI6ZmFsc2UsXFxcImJ1YmxlXFxcIjp7XFxcInRyYW5zZm9ybXNcXFwiOnt9fX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuLzQwNC52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyY1xcXFw0MDQudnVlXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTM2ZTU0ZmJjXCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtMzZlNTRmYmNcIiwgQ29tcG9uZW50Lm9wdGlvbnMpXG4gIH1cbiAgbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGlzcG9zZWQgPSB0cnVlXG4gIH0pXG59KSgpfVxuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQuZXhwb3J0c1xuIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbX3ZtLl92KFwid2VsY29tZVwiKV0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfVxuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAobW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKSAgICAgIC5yZXJlbmRlcihcImRhdGEtdi0yZmFkZjFlNVwiLCB7IHJlbmRlcjogcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZucyB9KVxuICB9XG59IiwidmFyIGRpc3Bvc2VkID0gZmFsc2Vcbi8qIHNjcmlwdCAqL1xuZXhwb3J0ICogZnJvbSBcIiEhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vaG9tZS52dWVcIlxuaW1wb3J0IF9fdnVlX3NjcmlwdF9fIGZyb20gXCIhISEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zY3JpcHQmaW5kZXg9MCEuL2hvbWUudnVlXCJcbi8qIHRlbXBsYXRlICovXG5pbXBvcnQge3JlbmRlciBhcyBfX3Z1ZV9yZW5kZXJfXywgc3RhdGljUmVuZGVyRm5zIGFzIF9fdnVlX3N0YXRpY19yZW5kZXJfZm5zX199IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci9pbmRleD97XFxcImlkXFxcIjpcXFwiZGF0YS12LTJmYWRmMWU1XFxcIixcXFwiaGFzU2NvcGVkXFxcIjpmYWxzZSxcXFwiYnVibGVcXFwiOntcXFwidHJhbnNmb3Jtc1xcXCI6e319fSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vaG9tZS52dWVcIlxuLyogdGVtcGxhdGUgZnVuY3Rpb25hbCAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX2Z1bmN0aW9uYWxfXyA9IGZhbHNlXG4vKiBzdHlsZXMgKi9cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IG51bGxcbi8qIHNjb3BlSWQgKi9cbnZhciBfX3Z1ZV9zY29wZUlkX18gPSBudWxsXG4vKiBtb2R1bGVJZGVudGlmaWVyIChzZXJ2ZXIgb25seSkgKi9cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fID0gbnVsbFxuaW1wb3J0IG5vcm1hbGl6ZUNvbXBvbmVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudC1ub3JtYWxpemVyXCJcbnZhciBDb21wb25lbnQgPSBub3JtYWxpemVDb21wb25lbnQoXG4gIF9fdnVlX3NjcmlwdF9fLFxuICBfX3Z1ZV9yZW5kZXJfXyxcbiAgX192dWVfc3RhdGljX3JlbmRlcl9mbnNfXyxcbiAgX192dWVfdGVtcGxhdGVfZnVuY3Rpb25hbF9fLFxuICBfX3Z1ZV9zdHlsZXNfXyxcbiAgX192dWVfc2NvcGVJZF9fLFxuICBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fXG4pXG5Db21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyY1xcXFxob21lLnZ1ZVwiXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7KGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhvdEFQSSA9IHJlcXVpcmUoXCJ2dWUtaG90LXJlbG9hZC1hcGlcIilcbiAgaG90QVBJLmluc3RhbGwocmVxdWlyZShcInZ1ZVwiKSwgZmFsc2UpXG4gIGlmICghaG90QVBJLmNvbXBhdGlibGUpIHJldHVyblxuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgaG90QVBJLmNyZWF0ZVJlY29yZChcImRhdGEtdi0yZmFkZjFlNVwiLCBDb21wb25lbnQub3B0aW9ucylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTJmYWRmMWU1XCIsIENvbXBvbmVudC5vcHRpb25zKVxuICB9XG4gIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRpc3Bvc2VkID0gdHJ1ZVxuICB9KVxufSkoKX1cblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50LmV4cG9ydHNcbiIsImltcG9ydCBhcHBmcmFtZSBmcm9tICcuL2FwcGZyYW1lLnZ1ZSdcclxuaW1wb3J0IHBhZ2U0MDQgZnJvbSAnLi80MDQudnVlJ1xyXG5pbXBvcnQgSG9tZSBmcm9tICcuL2hvbWUudnVlJ1xyXG5cclxuVnVlLnVzZShWdWVSb3V0ZXIpXHJcblxyXG4vL+WtmOaUvuW3sue7j+WKoOi9veeahOe7hOS7tu+8jOmYsuatoumHjeWkjeWKoOi9vee7hOS7tmpzXHJcbmxldCBhbGxjb21wcyA9IG5ldyBTZXQoKVxyXG4vL+e7hOS7tuS/oeaBr++8iOeUseWQjuWPsOi/lOWbnu+8jOagueaNruWQhOS4quaooeWdl+S/oeaBr+e7hOaIkO+8iVxyXG5WdWUucHJvdG90eXBlLiRhbGxjb21wb25lbnQgPSBbe1xyXG4gICAgICAgIG5hbWU6ICdjb21wMScsIC8vbmFtZSDmmK/nu4Tku7blnKjlhajlsYB3aW5kb3fkuIrnmoTlvJXnlKhcclxuICAgICAgICBwYXRoOiBcIi9jb21wMS9ob21lXCIsIC8vcGF0aCDnlKjkuo7lr7zoiKrlnLDlnYDvvIzku6Xlj4rooajnpLrnu4Tku7blnKjns7vnu5/kuK3nmoTop4TliJLnrYnnuqfvvIjkuIDkuozkuInnuqflr7zoiKrlr7nlupTlkITnp43nu4Tku7bvvIlcclxuICAgICAgICB1cmw6IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAxL2NvbXAxLmpzXCIgLy8gdXJsIOe7hOS7tueahOWcsOWdgFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnY29tcDMnLFxyXG4gICAgICAgIHBhdGg6IFwiL2NvbXAzL2hvbWVcIixcclxuICAgICAgICB1cmw6IFwiaHR0cDovL2xvY2FsaG9zdDo4MDAxL2NvbXAzLmpzXCJcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2NvbXAyJyxcclxuICAgICAgICBwYXRoOiBcIi9jb21wMi9ob21lXCIsXHJcbiAgICAgICAgdXJsOiBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMi9jb21wMi5qc1wiXHJcbiAgICB9XHJcbl1cclxuXHJcbi8v6Ieq5a6a5LmJ5byC5q2l5a+86Iiq5pa55rOVXHJcblZ1ZS5wcm90b3R5cGUuJGlyb3V0ZXIgPSByb3V0ZSA9PiB7XHJcbiAgICAvL+agueaNrnBhdGjmib7liLDlr7nlupTnmoTnu4Tku7ZcclxuICAgIGxldCBjb21wID0gVnVlLnByb3RvdHlwZS4kYWxsY29tcG9uZW50LmZpbmQoYyA9PiBjLnBhdGggPT0gcm91dGUpXHJcbiAgICBpZiAoIWNvbXApIHtcclxuICAgICAgICAvL+ayoeacieWMuemFjeWIsOe7hOS7tueahOWvvOiIquWIsDQwNOaIluS4u+mhtVxyXG4gICAgICAgIGlmIChyb3V0ZSA9PSAnLycpIHtcclxuICAgICAgICAgICAgZnJhbWVhcHAuJHJvdXRlci5wdXNoKCcvJylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmcmFtZWFwcC4kcm91dGVyLnB1c2goJy80MDQnKVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy/liJvlu7rkuIDkuKrmnIDmlrDnmoTlr7zoiKrnirbmgIFrZXlcclxuICAgICAgICBsZXQgY3VycmVudFJvdXRlS2V5ID0gTWF0aC5yYW5kb20oKVxyXG4gICAgICAgIC8v6K6+572u5YWo5bGA5a+86Iiq54q25oCBa2V55Li65pyA5pawXHJcbiAgICAgICAgd2luZG93Lm5ld1JvdXRlS2V5ID0gY3VycmVudFJvdXRlS2V5XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFhbGxjb21wcy5oYXMoY29tcC5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgLy/mt7vliqBzY3JpcHTmoIfnrb7liqDovb3nu4Tku7Zqc1xyXG4gICAgICAgICAgICAgICAgLy/lj5HnjrDph43lpI3liqDovb3ml7bvvIzlhYjliKDpmaTljp/mnaXnmoTlho3liqDovb1cclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdCcpLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuc3JjID09IGNvbXAudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICBsZXQgc2NyaXB0Y29tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKVxyXG4gICAgICAgICAgICAgICAgc2NyaXB0Y29tLnNyYyA9IGNvbXAudXJsXHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuYXBwZW5kQ2hpbGQoc2NyaXB0Y29tKVxyXG4gICAgICAgICAgICAgICAgLy9qc+WKoOi9veWujOaIkOWFqOWxgOWPmOmHj+S4ree7hOS7tuWPmOmHj+WtmOWcqOWQjuW8gOWni+a3u+WKoOi3r+eUse+8jOW5tuWvvOiIqlxyXG4gICAgICAgICAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgICAgICAgICAgICAgICBsZXQgdGltZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3aW5kb3dbY29tcC5uYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJvdXRlS2V5ID09IHdpbmRvdy5uZXdSb3V0ZUtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIG5vdykgLyAxMDAwIDwgNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodGltZXIsIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYOe7hOS7tiR7Y29tcC5uYW1lfeWKoOi9vei2heaXtmApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVhcHAuJHJvdXRlci5wdXNoKCcvNDA0JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDlj5bmtojlr7zoiKrliLAke2NvbXAubmFtZX1gKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy/mt7vliqDot6/nlLEs5qCH6K6w57uE5Lu25bey5Yqg6L29XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbGNvbXBzLmFkZChjb21wLm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAke2NvbXAubmFtZX3liqDovb3lrozmiJBgKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZWFwcC4kcm91dGVyLmFkZFJvdXRlcyhbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogY29tcC5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50OiB3aW5kb3dbY29tcC5uYW1lXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWVhcHAuJHJvdXRlci5wdXNoKGNvbXAucGF0aClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGltZXIoKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy/lt7LliqDovb3nu4Tku7bvvIznm7TmjqXlr7zoiKpcclxuICAgICAgICAgICAgICAgIGZyYW1lYXBwLiRyb3V0ZXIucHVzaChjb21wLnBhdGgpXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbi8v5re75Yqg6Lev55SxXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoe1xyXG4gICAgcm91dGVzOiBbe1xyXG4gICAgICAgIHBhdGg6ICcvJyxcclxuICAgICAgICBjb21wb25lbnQ6IEhvbWVcclxuICAgIH0sIHtcclxuICAgICAgICBwYXRoOiAnLzQwNCcsIC8vIOeUqOS6juaYvuekuuayoeacieWMuemFjeWIsOeahOmhtemdolxyXG4gICAgICAgIGNvbXBvbmVudDogcGFnZTQwNCxcclxuICAgIH1dXHJcbn0pXHJcblxyXG5yb3V0ZXIuYmVmb3JlRWFjaCgodG8sIGZyb20sIG5leHQpID0+IHtcclxuICAgIGxldCBjb21wID0gVnVlLnByb3RvdHlwZS4kYWxsY29tcG9uZW50LmZpbmQoYyA9PiBjLnBhdGggPT0gdG8ucGF0aClcclxuICAgIGlmIChjb21wKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChfID0+IHtcclxuICAgICAgICAgICAgLy/nrKzkuIDmrKHov5vlhaXot6/nlLHov5jmnKrliqDovb3nu4Tku7ZcclxuICAgICAgICAgICAgaWYgKCFhbGxjb21wcy5oYXMoY29tcC5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgZnJhbWVhcHAuJGlyb3V0ZXIodG8ucGF0aClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG5leHQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgMClcclxuICAgIH0gZWxzZSBpZiAodG8ucGF0aCA9PSAnLycgfHwgdG8ucGF0aCA9PSAnLzQwNCcpIHtcclxuICAgICAgICBuZXh0KClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV4dCgnLzQwNCcpXHJcbiAgICB9XHJcbn0pXHJcblxyXG5sZXQgYXBwID0gbmV3IFZ1ZSh7XHJcbiAgICBlbDogJyNhcHAnLFxyXG4gICAgcm91dGVyLFxyXG4gICAgdGVtcGxhdGU6ICc8YXBwZnJhbWUgLz4nLFxyXG4gICAgY29tcG9uZW50czoge1xyXG4gICAgICAgIGFwcGZyYW1lXHJcbiAgICB9XHJcbn0pXHJcblxyXG53aW5kb3cuZnJhbWVhcHAgPSBhcHAiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuZGl2W2RhdGEtdi0zNTIxMzkxY10ge1xcclxcbiAgcGFkZGluZzogMTBweDtcXG59XFxyXFxuXCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIkM6L1VzZXJzL3drc2MvRGVza3RvcC92dWVhcHBmcmFtZXJvdXRlL3NyYy9zcmMvYXBwZnJhbWUudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUF3QkE7RUFDQSxjQUFBO0NBQ0FcIixcImZpbGVcIjpcImFwcGZyYW1lLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxyXFxuICA8ZGl2IHN0eWxlPVxcXCJib3JkZXI6MXB4IHNvbGlkIGdyYXk7aGVpZ2h0OjgwMHB4O1xcXCI+XFxyXFxuICAgIDxkaXY+LS0tYXBwZnJhbWUtLS08L2Rpdj5cXHJcXG4gICAgPGRpdiBzdHlsZT1cXFwiYm9yZGVyOjFweCBzb2xpZCBncmF5O21hcmdpbjoxMHB4OyBwYWRkaW5nOjEwcHg7XFxcIj5cXHJcXG4gICAgPGVsLWJ1dHRvbiAgQGNsaWNrPSckaXJvdXRlcihcXFwiL1xcXCIpJz5Ib21lPC9lbC1idXR0b24+IFxcclxcbiAgICA8ZWwtYnV0dG9uIHYtZm9yPSdjb21wIGluICRhbGxjb21wb25lbnQnIDprZXk9J2NvbXAubmFtZScgQGNsaWNrPSckaXJvdXRlcihjb21wLnBhdGgpJz57e2NvbXAubmFtZX19PC9lbC1idXR0b24+IFxcclxcbiAgICA8ZWwtYnV0dG9uICBAY2xpY2s9JyRpcm91dGVyKFxcXCIvZXJyb3JwYXRoXFxcIiknPmVycm9ycGF0aDwvZWwtYnV0dG9uPiBcXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgc3R5bGU9XFxcImJvcmRlcjoxcHggc29saWQgZ3JheTttYXJnaW46MTBweDsgcGFkZGluZzoxMHB4OyBoZWlnaHQ6NTAwcHg7IFxcXCI+XFxyXFxuICAgICAgPGRpdj4tLS1yb3V0ZXItdmlldy0tLTwvZGl2PlxcclxcbiAgICAgIDxrZWVwLWFsaXZlPlxcclxcbiAgICAgICAgPHJvdXRlci12aWV3Pjwvcm91dGVyLXZpZXc+XFxyXFxuICAgICAgPC9rZWVwLWFsaXZlPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gIDwvZGl2PlxcclxcbjwvdGVtcGxhdGU+XFxyXFxuPHNjcmlwdD5cXHJcXG5leHBvcnQgZGVmYXVsdCB7XFxyXFxuICBkYXRhKCkge1xcclxcbiAgICByZXR1cm4ge307XFxyXFxuICB9XFxyXFxufTtcXHJcXG48L3NjcmlwdD5cXHJcXG48c3R5bGUgc2NvcGVkPlxcclxcbmRpdiB7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbn1cXHJcXG48L3N0eWxlPlwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtMzUyMTM5MWNcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9hcHBmcmFtZS52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNTZiZjUyNGZcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTM1MjEzOTFjXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vYXBwZnJhbWUudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTM1MjEzOTFjXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vYXBwZnJhbWUudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9